package org.bcos.proxy.contract;

import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.EventEncoder;
import org.bcos.web3j.abi.EventValues;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Address;
import org.bcos.web3j.abi.datatypes.Event;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.bcos.web3j.protocol.core.methods.response.Log;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class ContractAbiMgr extends Contract {
    private static final String BINARY = "";

    private ContractAbiMgr(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ContractAbiMgr(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static List<AddAbiEventResponse> getAddAbiEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddAbi", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddAbiEventResponse> responses = new ArrayList<AddAbiEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddAbiEventResponse typedResponse = new AddAbiEventResponse();
            typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.contractname = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.version = (Utf8String) eventValues.getNonIndexedValues().get(2);
            typedResponse.abi = (Utf8String) eventValues.getNonIndexedValues().get(3);
            typedResponse.addr = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.blocknumber = (Uint256) eventValues.getNonIndexedValues().get(5);
            typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(6);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddAbiEventResponse> addAbiEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddAbi", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddAbiEventResponse>() {
            @Override
            public AddAbiEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddAbiEventResponse typedResponse = new AddAbiEventResponse();
                typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.contractname = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.version = (Utf8String) eventValues.getNonIndexedValues().get(2);
                typedResponse.abi = (Utf8String) eventValues.getNonIndexedValues().get(3);
                typedResponse.addr = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.blocknumber = (Uint256) eventValues.getNonIndexedValues().get(5);
                typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(6);
                return typedResponse;
            }
        });
    }

    public static List<UpdateAbiEventResponse> getUpdateAbiEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateAbi", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateAbiEventResponse> responses = new ArrayList<UpdateAbiEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateAbiEventResponse typedResponse = new UpdateAbiEventResponse();
            typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.contractname = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.version = (Utf8String) eventValues.getNonIndexedValues().get(2);
            typedResponse.abi = (Utf8String) eventValues.getNonIndexedValues().get(3);
            typedResponse.addr = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.blocknumber = (Uint256) eventValues.getNonIndexedValues().get(5);
            typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(6);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateAbiEventResponse> updateAbiEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateAbi", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateAbiEventResponse>() {
            @Override
            public UpdateAbiEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateAbiEventResponse typedResponse = new UpdateAbiEventResponse();
                typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.contractname = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.version = (Utf8String) eventValues.getNonIndexedValues().get(2);
                typedResponse.abi = (Utf8String) eventValues.getNonIndexedValues().get(3);
                typedResponse.addr = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.blocknumber = (Uint256) eventValues.getNonIndexedValues().get(5);
                typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(6);
                return typedResponse;
            }
        });
    }

    public Future<List<Type>> getAll(Utf8String name) {
        Function function = new Function("getAll", 
                Arrays.<Type>asList(name), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Utf8String> getContractName(Utf8String name) {
        Function function = new Function("getContractName", 
                Arrays.<Type>asList(name), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> getAllByIndex(Uint256 index) {
        Function function = new Function("getAllByIndex", 
                Arrays.<Type>asList(index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Utf8String> getVersion(Utf8String name) {
        Function function = new Function("getVersion", 
                Arrays.<Type>asList(name), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getBlockNumber(Utf8String name) {
        Function function = new Function("getBlockNumber", 
                Arrays.<Type>asList(name), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addAbi(Utf8String name, Utf8String contractname, Utf8String version, Utf8String abi, Address addr) {
        Function function = new Function("addAbi", Arrays.<Type>asList(name, contractname, version, abi, addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void addAbi(Utf8String name, Utf8String contractname, Utf8String version, Utf8String abi, Address addr, TransactionSucCallback callback) {
        Function function = new Function("addAbi", Arrays.<Type>asList(name, contractname, version, abi, addr), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<Utf8String> getAbi(Utf8String name) {
        Function function = new Function("getAbi", 
                Arrays.<Type>asList(name), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> getAddr(Utf8String name) {
        Function function = new Function("getAddr", 
                Arrays.<Type>asList(name), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> updateAbi(Utf8String name, Utf8String contractname, Utf8String version, Utf8String abi, Address addr) {
        Function function = new Function("updateAbi", Arrays.<Type>asList(name, contractname, version, abi, addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void updateAbi(Utf8String name, Utf8String contractname, Utf8String version, Utf8String abi, Address addr, TransactionSucCallback callback) {
        Function function = new Function("updateAbi", Arrays.<Type>asList(name, contractname, version, abi, addr), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<Uint256> getTimeStamp(Utf8String name) {
        Function function = new Function("getTimeStamp", 
                Arrays.<Type>asList(name), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getAbiCount() {
        Function function = new Function("getAbiCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<ContractAbiMgr> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ContractAbiMgr.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<ContractAbiMgr> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ContractAbiMgr.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static ContractAbiMgr load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ContractAbiMgr(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ContractAbiMgr load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ContractAbiMgr(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddAbiEventResponse {
        public Utf8String name;

        public Utf8String contractname;

        public Utf8String version;

        public Utf8String abi;

        public Address addr;

        public Uint256 blocknumber;

        public Uint256 timestamp;
    }

    public static class UpdateAbiEventResponse {
        public Utf8String name;

        public Utf8String contractname;

        public Utf8String version;

        public Utf8String abi;

        public Address addr;

        public Uint256 blocknumber;

        public Uint256 timestamp;
    }
}
