package org.bcos.proxy.contract;

import org.bcos.channel.client.TransactionSucCallback;
import org.bcos.web3j.abi.EventEncoder;
import org.bcos.web3j.abi.EventValues;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Bool;
import org.bcos.web3j.abi.datatypes.DynamicArray;
import org.bcos.web3j.abi.datatypes.Event;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.bcos.web3j.abi.datatypes.generated.Int256;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.abi.datatypes.generated.Uint8;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.bcos.web3j.protocol.core.methods.response.Log;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class Meshchain extends Contract {
    private static final String BINARY = ".sol:LibTrieP__63cfb51928846000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a68578082015181840152602081019050611a4d565b50505050905090810190601f168015611a955780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1515611ab157600080fd5b6102c65a03f41515611ac257600080fd5b50505060405180519050915060008298509850611aef565b838060010194505061192f565b600181985098505b505050505050509250929050565b611b056121b1565b6002805480602002602001604051908101604052809291908181526020018280548015611b5557602002820191906000526020600020905b81546000191681526020019060010190808311611b3d575b5050505050905090565b60008060008060016000866000191660001916815260200190815260200160002060000154111515611b9d5760008081915080905092509250611bc9565b600160008560001916600019168152602001908152602001600020905080600401548160030154925092505b50915091565b600281815481101515611bde57fe5b90600052602060002090016000915090505481565b600080600160008660001916600019168152602001908152602001600020600001541115611ca85760008260ff161415611c65577fadc8d5c9125a135a878d45a5418853c911885a244706bcd0077d9ad85947c6376127106040518082815260200191505060405180910390a1611c9f565b7fadc8d5c9125a135a878d45a5418853c911885a244706bcd0077d9ad85947c63761271f6040518082815260200191505060405180910390a15b60009050611e00565b60e060405190810160405280438152602001856000191681526020018481526020016000815260200160008152602001600060ff1681526020018360ff1681525060016000866000191660001916815260200190815260200160002060008201518160000155602082015181600101906000191690556040820151816002019080519060200190611d3a9291906121c5565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360ff16021790555060c08201518160050160016101000a81548160ff021916908360ff16021790555090505060028054806001018281611da89190612245565b9160005260206000209001600086909190915090600019169055507fadc8d5c9125a135a878d45a5418853c911885a244706bcd0077d9ad85947c63760006040518082815260200191505060405180910390a1600190505b9392505050565b6000806000611e14611f4c565b91506000806000806000888a8c8e8a2f90508092505050949350505050565b611e3b612183565b600060208301905060408051908101604052808451815260200182815250915050919050565b6000808260000151611e858560000151866020015186600001518760200151611f57565b0190505b836000015184602001510181111515611ed15781806001019250508260000151611ec9856020015183038660000151038386600001518760200151611f57565b019050611e89565b5092915050565b611ee0612183565b611eeb838383612013565b5092915050565b611efa61219d565b611f0261219d565b60008360000151604051805910611f165750595b90808252806020026020018201604052509150602082019050611f4281856020015186600001516120b1565b8192505050919050565b600062066668905090565b6000806000806000888711151561200157602087111515611fb85760018760200360080260020a031980875116888b038a018a96505b818388511614611fad57600187019650806001880310611f8d578b8b0196505b505050839450612007565b8686209150879350600092505b86890383111515612000578684209050806000191682600019161415611fed57839450612007565b6001840193508280600101935050611fc5565b5b88880194505b50505050949350505050565b61201b612183565b60006120398560000151866020015186600001518760200151611f57565b9050846020015183602001818152505084602001518103836000018181525050846000015185602001510181141561207b5760008560000181815250506120a6565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b6020821015156120d957825184526020840193506020830192506020820391506120b4565b6001826020036101000a0390508019835116818551168181178652505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121355780548555612172565b8280016001018555821561217257600052602060002091601f016020900482015b82811115612171578254825591600101919060010190612156565b5b50905061217f9190612271565b5090565b604080519081016040528060008152602001600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061220657805160ff1916838001178555612234565b82800160010185558215612234579182015b82811115612233578251825591602001919060010190612218565b5b5090506122419190612271565b5090565b81548183558181151161226c5781836000526020600020918201910161226b9190612296565b5b505050565b61229391905b8082111561228f576000816000905550600101612277565b5090565b90565b6122b891905b808211156122b457600081600090555060010161229c565b5090565b905600a165627a7a723058203061d77e263096da91648b3b0b33813211b85b0ecba168c2b8d1817b6d7192490029";

    private Meshchain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Meshchain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static List<RetLogEventResponse> getRetLogEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("retLog", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RetLogEventResponse> responses = new ArrayList<RetLogEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RetLogEventResponse typedResponse = new RetLogEventResponse();
            typedResponse.code = (Int256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RetLogEventResponse> retLogEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("retLog", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RetLogEventResponse>() {
            @Override
            public RetLogEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RetLogEventResponse typedResponse = new RetLogEventResponse();
                typedResponse.code = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public static List<AssetsLogEventResponse> getAssetsLogEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("assetsLog", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AssetsLogEventResponse> responses = new ArrayList<AssetsLogEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AssetsLogEventResponse typedResponse = new AssetsLogEventResponse();
            typedResponse.code = (Int256) eventValues.getNonIndexedValues().get(0);
            typedResponse.availAssets = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.frozenAssets = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssetsLogEventResponse> assetsLogEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("assetsLog", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssetsLogEventResponse>() {
            @Override
            public AssetsLogEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AssetsLogEventResponse typedResponse = new AssetsLogEventResponse();
                typedResponse.code = (Int256) eventValues.getNonIndexedValues().get(0);
                typedResponse.availAssets = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.frozenAssets = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Future<TransactionReceipt> merchantWithdrawal(Bytes32 merchantId) {
        Function function = new Function("merchantWithdrawal", Arrays.<Type>asList(merchantId), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void merchantWithdrawal(Bytes32 merchantId, TransactionSucCallback callback) {
        Function function = new Function("merchantWithdrawal", Arrays.<Type>asList(merchantId), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<Bool> checkPub(Utf8String pub) {
        Function function = new Function("checkPub", 
                Arrays.<Type>asList(pub), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> verifyProofAndDeposit(Utf8String root, Utf8String proofs, Utf8String key, Utf8String targetValue, Bytes32 merchantId, Uint256 assets) {
        Function function = new Function("verifyProofAndDeposit", Arrays.<Type>asList(root, proofs, key, targetValue, merchantId, assets), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void verifyProofAndDeposit(Utf8String root, Utf8String proofs, Utf8String key, Utf8String targetValue, Bytes32 merchantId, Uint256 assets, TransactionSucCallback callback) {
        Function function = new Function("verifyProofAndDeposit", Arrays.<Type>asList(root, proofs, key, targetValue, merchantId, assets), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<TransactionReceipt> addPub(Utf8String pub) {
        Function function = new Function("addPub", Arrays.<Type>asList(pub), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void addPub(Utf8String pub, TransactionSucCallback callback) {
        Function function = new Function("addPub", Arrays.<Type>asList(pub), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<TransactionReceipt> registerUser(Bytes32 uid) {
        Function function = new Function("registerUser", Arrays.<Type>asList(uid), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void registerUser(Bytes32 uid, TransactionSucCallback callback) {
        Function function = new Function("registerUser", Arrays.<Type>asList(uid), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<TransactionReceipt> confirmWithdrawal(Bytes32 merchantId, Uint256 frozenAssets, Uint8 status) {
        Function function = new Function("confirmWithdrawal", Arrays.<Type>asList(merchantId, frozenAssets, status), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void confirmWithdrawal(Bytes32 merchantId, Uint256 frozenAssets, Uint8 status, TransactionSucCallback callback) {
        Function function = new Function("confirmWithdrawal", Arrays.<Type>asList(merchantId, frozenAssets, status), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<TransactionReceipt> userDeposit(Bytes32 uid, Uint256 assets) {
        Function function = new Function("userDeposit", Arrays.<Type>asList(uid, assets), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void userDeposit(Bytes32 uid, Uint256 assets, TransactionSucCallback callback) {
        Function function = new Function("userDeposit", Arrays.<Type>asList(uid, assets), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<TransactionReceipt> consume(Bytes32 uid, Bytes32 merchantId, Uint256 assets) {
        Function function = new Function("consume", Arrays.<Type>asList(uid, merchantId, assets), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void consume(Bytes32 uid, Bytes32 merchantId, Uint256 assets, TransactionSucCallback callback) {
        Function function = new Function("consume", Arrays.<Type>asList(uid, merchantId, assets), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public Future<List<Type>> verifySign(Utf8String pubs, Utf8String signs) {
        Function function = new Function("verifySign", 
                Arrays.<Type>asList(pubs, signs), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bytes32>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<DynamicArray<Bytes32>> getAllMerchantIds() {
        Function function = new Function("getAllMerchantIds", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> getMerchantAssets(Bytes32 merchantId) {
        Function function = new Function("getMerchantAssets", 
                Arrays.<Type>asList(merchantId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Bytes32> merchantIds(Uint256 param0) {
        Function function = new Function("merchantIds", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> registerMerchant(Bytes32 merchantId, Utf8String name, Uint8 mtype) {
        Function function = new Function("registerMerchant", Arrays.<Type>asList(merchantId, name, mtype), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public void registerMerchant(Bytes32 merchantId, Utf8String name, Uint8 mtype, TransactionSucCallback callback) {
        Function function = new Function("registerMerchant", Arrays.<Type>asList(merchantId, name, mtype), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public static Future<Meshchain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Meshchain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Meshchain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Meshchain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Meshchain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Meshchain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Meshchain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Meshchain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class RetLogEventResponse {
        public Int256 code;
    }

    public static class AssetsLogEventResponse {
        public Int256 code;

        public Uint256 availAssets;

        public Uint256 frozenAssets;
    }
}
